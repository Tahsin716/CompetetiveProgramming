/*
 * The MIT License
 *
 * Copyright 2017 Tahsin Rashad.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package conversion;

/**
 *
 * @author Tahsin Rashad
 */
public class UnitConversion extends javax.swing.JFrame {
    
    /**
     * Creates new form UnitConversion
     */
    public UnitConversion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioGroup = new javax.swing.ButtonGroup();
        tempRadio = new javax.swing.JRadioButton();
        distanceRadio = new javax.swing.JRadioButton();
        tempCombo = new javax.swing.JComboBox<>();
        distanceCombo = new javax.swing.JComboBox<>();
        input = new javax.swing.JTextField();
        labelInput = new javax.swing.JLabel();
        outputLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));

        radioGroup.add(tempRadio);
        tempRadio.setForeground(new java.awt.Color(51, 51, 51));
        tempRadio.setSelected(true);
        tempRadio.setText("Temperature");
        tempRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonHandler(evt);
            }
        });

        radioGroup.add(distanceRadio);
        distanceRadio.setForeground(new java.awt.Color(51, 51, 51));
        distanceRadio.setText("Distance");
        distanceRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonHandler(evt);
            }
        });

        tempCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Celsius to Fahrenheit", "Fahrenheit to Celsius", "Celsius to Kelvin", "Kelvin to Celsius" }));

        distanceCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Centimeter to Kilometer", "Kilometer to Centimeter", "Feet to Kilometer", "Kilometer to Feet" }));
        distanceCombo.setEnabled(false);

        input.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        labelInput.setText("Input");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(tempRadio)
                        .addGap(50, 50, 50)
                        .addComponent(distanceRadio))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(tempCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(88, 88, 88)
                        .addComponent(distanceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(labelInput)
                        .addGap(26, 26, 26)
                        .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(outputLabel)))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempRadio)
                    .addComponent(distanceRadio))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(distanceCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(input, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelInput))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                .addComponent(outputLabel)
                .addGap(59, 59, 59))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * 
     * @param evt 
     * 
     * Method for handling JTextField event
     */
    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        userInput = input.getText();
        if(distanceCombo.isEnabled())
            distanceCalculator(userInput);
        else
            temperatureCalculator(userInput);
    }//GEN-LAST:event_inputActionPerformed
    /**
     * 
     * @param evt 
     * 
     * Method for handling JRadioButton event
     */
    private void radioButtonHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonHandler
        if(evt.getSource() == tempRadio) {
            tempCombo.setEnabled(true);
            distanceCombo.setEnabled(false);
        }
        else {
            tempCombo.setEnabled(false);
            distanceCombo.setEnabled(true);
        }
    }//GEN-LAST:event_radioButtonHandler

    
    public static void main(String args[]) {
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UnitConversion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> distanceCombo;
    private javax.swing.JRadioButton distanceRadio;
    private javax.swing.JTextField input;
    private javax.swing.JLabel labelInput;
    private javax.swing.JLabel outputLabel;
    private javax.swing.ButtonGroup radioGroup;
    private javax.swing.JComboBox<String> tempCombo;
    private javax.swing.JRadioButton tempRadio;
    // End of variables declaration//GEN-END:variables
    private String userInput, output;
    final double FEET_KILO_CONSTANT = 0.0003048;
   
    /**
     * 
     * @param input 
     * 
     * Method for distance conversion
     */
    private void distanceCalculator(String input) {
        try {
            
           double number = Double.parseDouble(input);
            
            switch (distanceCombo.getSelectedIndex()) {
                case 0:
                    output = String.format("%.2f centimeter converts to %.4f kilometer", number, number/100000);
                    outputLabel.setText(output);
                    break;
                case 1:
                    output = String.format("%.2f kilometer converts to %.2f centimeter", number, number*100000);
                    outputLabel.setText(output);
                    break;
                case 2:
                    output = String.format("%.2f feet converts to %.4f kilometer", number, number*FEET_KILO_CONSTANT);
                    outputLabel.setText(output);
                    break;
                case 3:
                default:
                    output = String.format("%.2f kilometer converts to %.4f feet", number, number/FEET_KILO_CONSTANT);
                    outputLabel.setText(output);
                    break;
            }
        }catch(NumberFormatException e) {
            
        }
        
    }

    /**
     * 
     * @param input 
     * 
     * Method for temperature conversion
     */
    private void temperatureCalculator(String input) {
        try {
            double number = Double.parseDouble(input);
            
            switch(tempCombo.getSelectedIndex()) {
                case 0:
                    output = String.format("%.2f° celsius converts to %.2f° fahrenheit", number, number*1.8 +32);
                    outputLabel.setText(output);
                    break;
                case 1:
                    output = String.format("%.2f° fahrenheit converts to %.2f° celsius", number,(number - 32)/1.8);
                    outputLabel.setText(output);
                    break;
                case 2:
                    output = String.format("%.2f° celsius converts to %.2f° kelvin", number, number + 273.15);
                    outputLabel.setText(output);
                    break;
                case 3:
                default:
                    output = String.format("%.2f° kelvin converts to %.2f° celsius", number, number - 273.15);
                    outputLabel.setText(output);
                    break;
            }
        }catch(NumberFormatException e) {
            
        }
    }
}
